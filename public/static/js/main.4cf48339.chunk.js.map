{"version":3,"sources":["components/LaunchItem.js","components/Launches.js","components/Launch.js","images/logo.png","App.js","reportWebVitals.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","format","to","LAUNCHES_QUERY","gql","Launches","useQuery","loading","error","data","console","log","JSON","stringify","message","launches","map","LAUNCH_QUERY","Launch","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","cache","InMemoryCache","App","src","logo","alt","style","width","display","margin","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4cf48339.chunk.js","sourcesContent":["import React from 'react';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nexport default function LaunchItem({ launch: { flight_number, mission_name,\n    launch_date_local, launch_success\n} }) {\n    return (\n        <div className=\"card card-body mb-4\">\n            <div className=\"row\">\n                <div className=\"col-md-9\">\n                    <h4>Mission:\n                        <span className={launch_success ? 'text-success' : 'text-danger'}>\n                            {mission_name}\n                        </span>\n                    </h4>\n                    <p>Date: <Moment format = \"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\n                </div>\n                <div className=\"col-md-3\">\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n                </div>\n            </div>\n        </div>\n    )\n}\n","import React, { Fragment } from 'react'\nimport { gql, useQuery } from '@apollo/client';\nimport LaunchItem from './LaunchItem';\n\nconst LAUNCHES_QUERY = gql`\n    query LaunchesQuery {\n        launches {\n            flight_number\n            mission_name,\n            launch_date_local\n            launch_success\n        }\n    }\n`;\n// The cache automatically adds __typename fields to all outgoing queries, removing the need to add them manually.\nfunction Launches() {\n    const { loading, error, data } = useQuery(LAUNCHES_QUERY);\n    if (loading) return <h1>Loading...</h1>\n    if (error) {\n        console.log(JSON.stringify(error));\n        return <h1>{error.message}</h1>\n    }\n    return (\n        <Fragment>\n            <h1 className=\"display-4 my-3\">Launches</h1>\n                <Fragment>\n                {data.launches.map(launch => (\n                    <LaunchItem key={launch.flight_number} launch={launch}/>\n                ))}\n            </Fragment>\n        </Fragment>\n    )\n}\n\nexport default Launches\n","import React, { Fragment } from 'react';\nimport { gql, useQuery } from '@apollo/client';\nimport { Link } from 'react-router-dom';\n\nconst LAUNCH_QUERY = gql`\n    query LaunchQuery($flight_number: Int!) {\n     launch(flight_number: $flight_number)  {\n         flight_number\n         mission_name\n         launch_year\n         launch_success\n         launch_date_local,\n         rocket {\n             rocket_id\n             rocket_name\n             rocket_type\n         }\n     } \n    }\n`;\nexport default function Launch(props) {\n    let { flight_number } = props.match.params;\n    flight_number = parseInt(flight_number);\n    const { loading, error, data } = useQuery(LAUNCH_QUERY, { variables: { flight_number } });\n    if (loading) return <h1>Loading...</h1>\n    if (error) {\n        console.log(JSON.stringify(error));\n        return <h1>{error.message}</h1>\n    }\n    const {\n        mission_name,\n        launch_year, launch_success,\n        rocket: { rocket_id, rocket_name, rocket_type } } = data.launch;\n    return (\n        <Fragment>\n            <h1 className=\"display-4 my-3\"><span className=\"text-dark\">Mission: </span>\n                {mission_name}\n            </h1>\n            <h4 className=\"mb-3\">Launch Details</h4>\n            <ul className=\"list-group\">\n                <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n                <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n                <li className=\"list-group-item\">Launch successful: <span className={launch_success ? 'text-success' : 'text-danger'}>{launch_success ? 'Yes' : 'No'}</span></li>\n            </ul>\n            <h4 className=\"my-3\">Rocket details</h4>\n            <ul className=\"list-group\">\n                <li className=\"list-group-item\">Rocket Id: {rocket_id}</li>\n                <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n                <li className=\"list-group-item\">Rocket type: {rocket_type}</li>\n            </ul>\n            <hr/>\n            <Link to= \"/\" className=\"btn btn-secondary\">Back</Link>\n        </Fragment>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/logo.e548eb03.png\";","import './App.css';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport { logo } from './images/index';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\n\n//Created constructor for apollo client\nconst client = new ApolloClient({\n  uri: '/graphql', // http://localhost:5000/graphql\n  /* \n  Apollo Client stores the results of its GraphQL queries in a normalized, in-memory cache. \n  This enables your client to respond to future queries for the same data without sending unnecessary network requests.\n  */\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  return (\n    // Wrapping container to Apollo Provider\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <img\n            src={logo}\n            alt=\"SpaceX\"\n            style={{ width: 300, display: 'block', margin: 'auto' }} />\n          <Route exact path=\"/\"  component={Launches}/>\n          <Route exact path=\"/launch/:flight_number\"  component={Launch}/>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}